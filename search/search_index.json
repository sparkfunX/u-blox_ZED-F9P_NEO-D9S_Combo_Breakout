{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SparkX u-blox ZED-F9P NEO-D9S Combo Breakout","text":""},{"location":"#sparkx-u-blox-zed-f9p-neo-d9s-combo-breakout","title":"SparkX u-blox ZED-F9P NEO-D9S Combo Breakout","text":"<p>The SparkX u-blox ZED-F9P NEO-D9S Combo Breakout (SPX-20167) combines the u-blox ZED-F9P multi-band high precision GNSS module with the NEO-D9S L-band GNSS correction data receiver. With a clear view of the sky, especially a clear view to the South, this combo breakout will deliver centimeter-level accuracy positioning without needing separate RTK or NTRIP corrections. An on-board splitter (power divider) allows you to connect both modules to a single L1/L2/L-Band antenna.</p> <p>"},{"location":"#sparkx-u-blox-zed-f9p-neo-d9s-combo-breakout-spx-20167","title":"SparkX u-blox ZED-F9P NEO-D9S Combo Breakout (SPX-20167)","text":"<p>The Combo Breakout is designed to work with u-blox's PointPerfect L-band satellite GNSS augmentation service, which provides homogeneous coverage in contiguous USA and Europe.</p> <p>Attention</p> <p>u-blox provides products and services to \"B2B Customers\". Only business customers are eligible to register for a Thingstream (PointPerfect) account. You may be required to demonstrate that the use of the combo breakout is in relation to your trade, business, craft or profession. u-blox products and services are not intended for individual consumer use.</p>"},{"location":"board_files/","title":"Board Files","text":"<ul> <li>Schematic (PDF)</li> <li>Eagle Files (ZIP)</li> <li>Board Dimensions (PNG)</li> </ul>"},{"location":"contribute/","title":"Contribute: Help Fix our Mistake!","text":"<p>Spot something wrong? Feel free to contribute our open-source design and documentation. </p>"},{"location":"contribute/#improve-our-documentation","title":"Improve our Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>These pages are contained in the <code>docs</code> folder of the SparkX u-blox ZED-F9P NEO-D9S Combo Breakout repository.</li> </ul>"},{"location":"contribute/#submit-a-correction","title":"Submit a Correction","text":"<ol> <li>Fork this repo</li> <li>Add your corrections or improvements to the markdown file</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvements to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"contribute/#improve-our-hardware-design","title":"Improve our Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkX u-blox ZED-F9P NEO-D9S Combo Breakout repository. </li> </ul>"},{"location":"contribute/#submit-a-design-improvement","title":"Submit a Design Improvement","text":"<ol> <li>Fork this repo</li> <li>Add your design improvements</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvements, if they are within our board design standards and meet our product design requirements, we will flag these changes for our next board revision. (Please note, that even if your suggestion is accepted, these changes may not be immediate. We may have to cycle through our current product inventory first.)</li> </ul> </li> </ol>"},{"location":"contribute/#contributors","title":"Contributors","text":"<p>Let's provided some recognition to the contributors for this project!</p> <p> </p>"},{"location":"file_issue/","title":"Did we make a mistake?","text":"<p>Spot something wrong? Please let us know. </p> <p>Attention</p> <p>SparkX products are rapidly produced to bring you the most cutting edge technology as it becomes available. These products are tested but come with no guarantees. Live technical support is not available for SparkX products. Head on over to our forum for support or to ask a question.</p>"},{"location":"file_issue/#discrepancies-in-the-documentation","title":"Discrepancies in the Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>These pages are contained in the <code>docs</code> folder of the SparkX u-blox ZED-F9P NEO-D9S Combo Breakout repository.</li> </ul>"},{"location":"file_issue/#spot-something-wrong","title":"Spot something wrong?","text":"<p>If a section of the documentation is incorrect, please open an issue and let us know.</p>"},{"location":"file_issue/#do-you-have-a-suggested-correction","title":"Do you have a suggested correction?","text":"<ol> <li>Fork this repo</li> <li>Add your corrections or improvements to the markdown file</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvements to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"file_issue/#problems-in-the-hardware-design","title":"Problems in the Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkX u-blox ZED-F9P NEO-D9S Combo Breakout repository. </li> </ul>"},{"location":"file_issue/#does-something-not-make-sense","title":"Does something not make sense?","text":"<p>If part of the design is confusing, please open an issue and let us know.</p>"},{"location":"file_issue/#did-we-forget-to-include-an-important-function-of-the-board","title":"Did we forget to include an important function of the board?","text":"<ul> <li>Please keep in mind that we may intentionally exclude certain functions of the board to meet our product design requirements. (For example, our Qwiic Micro boards are intended to fit on a small board layout and only use I2C communincation; therefore, we may not have the SPI and interrupt pins available for users.)</li> <li>If part of the board's functionality is missing, please open an issue and file a feature request.</li> </ul>"},{"location":"file_issue/#do-you-wish-to-contribute-directly-to-improving-the-board-design","title":"Do you wish to contribute directly to improving the board design?","text":"<ol> <li>Fork this repo</li> <li>Add your design improvements</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvements, if they are within our board design standards and meet our product design requirements, we will flag these changes for our next board revision. (Please note, that even if your suggestion is accepted, these changes may not be immediate. We may have to cycle through our current product inventory first.)</li> </ul> </li> </ol>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#getting-started","title":"Getting Started","text":"<p>Before you begin, you need to think about how you will use the SparkX u-blox ZED-F9P NEO-D9S Combo Breakout.</p> <p>The Combo Breakout is a very versatile board, combining the u-blox ZED-F9P multi-band high precision GNSS module with the NEO-D9S L-band GNSS correction data receiver.</p> <p> Hookup for u-center with two USB cables. (Click to enlarge) </p> <p>If you intend to use u-blox's u-center (GNSS evaluation software for Windows) to configure both the ZED-F9P and the NEO-D9S and log data from the ZED-F9P, all you need to get started is a pair of USB cables and a suitable antenna. u-blox have written an excellent application note which shows how to configure both modules using u-center.</p> GNSS Multi-Band L1/L2 Surveying Antenna (TNC) - TOP106              GPS-17751          Interface Cable - SMA Female to SMA Male (10m, RG58)              CAB-21281          <p>The Combo Breakout has a single female SMA socket for the antenna connection. An on-board splitter (power divider) allows the ZED-F9P and NEO-D9S to share a single antenna. You need an antenna which supports both L1 and L2 GNSS, and which also provides broad coverage of the L-Band for the correction signal. Our TOP-106 antenna is a good choice. It has a TNC connection, so you may also want to purchase a SMA to TNC interface cable and/or a SMA female to male extension cable, depending on your needs:</p> Interface Cable - SMA Male to TNC Male (300mm)              CAB-17833          Interface Cable - SMA Female to SMA Male (25cm)              WRL-12861"},{"location":"getting_started/#getting-started-with-arduino","title":"Getting Started with Arduino","text":"<p> Hookup for Arduino using Qwiic. (Click to enlarge) </p> <p>It is also possible to power the board and communicate with it using I2C by connecting to either of the board's Qwiic connectors. SparkFun's Qwiic Connect System uses 4-pin JST connectors, allowing you to quickly interface your development board to the Combo Board.</p> <p>Our u-blox GNSS Arduino Library - v3 contains a comprehensive set of tried and tested examples that will work on any Qwiic-enabled development board. There are dedicated examples for the ZED-F9P and NEO-D9S.</p> <p>You can also use 3.3V Serial (UART) to communicate with both the ZED-F9P and NEO-D9S. Our Arduino Library supports both Serial and I2C. (It supports SPI too, but SPI is not supported on the Combo Breakout).</p> <p>When choosing a development board, you might want to choose one which has built-in WiFi. The correction data received by the NEO-D9S is encrypted, you need to pass keys to the ZED-F9P so it can decrypt the data. A WiFi connection will allow you to download the PointPerfect SPARTN encryption keys directly from u-blox's Thingstream IoT service using MQTT.</p> <p>You might also find a microSD card socket useful for data logging. If you want to log data while you are out in the field, being able to connect a Li-Po battery will be useful too.</p> <p>These two ESP32 development boards support: Qwiic, Serial, WiFi, microSD and Li-Po.</p> SparkFun Thing Plus - ESP32 WROOM (USB-C)              WRL-20168          SparkFun IoT RedBoard - ESP32 Development Board              WRL-19177          SparkFun Qwiic Cable Kit              KIT-15081          USB 3.1 Cable A to C - 3 Foot              CAB-14743"},{"location":"getting_started/#li-po-battery","title":"Li-Po Battery","text":"<p>For mobile applications, users will want to pick up a single-cell LiPo battery from our catalog. Below, are a few available options:</p> Lithium Ion Battery - 2Ah              PRT-13855          Lithium Ion Battery - 400mAh              PRT-13851          Lithium Ion Battery - 1Ah              PRT-13813"},{"location":"getting_started/#jumper-modification","title":"Jumper Modification","text":"<p>To modify the jumpers, users will need soldering equipment and/or a knife.</p> Solder Lead Free - 100-gram Spool              TOL-09325          Weller WLC100 Soldering Station              TOL-14228          Chip Quik No-Clean Flux Pen - 10mL              TOL-14579          Hobby Knife              TOL-09200          <p>Note</p> <p><p>New to jumpter pads? Check out our Jumper Pads and PCB Traces Tutorial for a quick introduction!</p> <p> How to Work with Jumper Pads and PCB Traces </p></p>"},{"location":"getting_started/#suggested-reading","title":"Suggested Reading","text":"<p>As a more professionally oriented product, we will skip over the more fundamental tutorials (i.e. Ohm's Law and What is Electricity?). However, below are a few tutorials that may help users familiarize themselves with various aspects of the board.</p> Installing the Arduino IDE Installing Board Definitions in the Arduino IDE Installing an Arduino Library How to Install CH340 Drivers How to Solder: Through-Hole Soldering How to Work with Jumper Pads and PCB Traces Serial Communication Analog vs. Digital Pulse Width Modulation Logic Levels I2C Serial Peripheral Interface (SPI) <p> <p></p> <p>One of the new, advanced features of our Processor Boards is that they take advantage of the Qwiic connect system. We recommend familiarizing yourself with the Logic Levels and I2C tutorials.  Click on the banner above to learn more about Qwiic products.</p> <p> </p>"},{"location":"hardware_overview/","title":"Hardware Overview","text":""},{"location":"hardware_overview/#hardware-overview","title":"Hardware Overview","text":"<p> The Combo Breakout PCB. (Click to enlarge) </p> <p>The u-blox ZED-F9P NEO-D9S Combo Breakout is a sophisticated yet compact GNSS board. The following is a summary of its features and functions:</p> <ul> <li><code>ZED-F9P</code> - the ZED-F9P is a top-of-the-line module for high accuracy GNSS and GPS location solutions<ul> <li>Concurrent reception of GPS, GLONASS, Galileo and BeiDou</li> <li>Multi-band RTK with fast convergence times and reliable performance</li> <li>Centimeter-level accuracy in a small and energy-efficient module</li> </ul> </li> </ul> <p> The ZED-F9P GNSS module. (Click to enlarge) </p> <ul> <li><code>NEO-D9S</code> - the NEO-D9S is a satellite data receiver for L-band correction broadcast<ul> <li>The NEO-D9S can be configured for use with a variety of L-band correction services including u-blox's PointPerfect service</li> <li>It decodes the satellite transmission and outputs a correction stream directly to the ZED-F9P via UART2</li> </ul> </li> </ul> <p> The NEO-D9S correction data receiver. (Click to enlarge) </p> <ul> <li><code>UART2 TX and RX</code> - the ZED-F9P and NEO-D9S UART2 TX and RX are interconnected (crossed-over) to allow the NEO to feed corrections directly to the ZED<ul> <li>The UART2 pins can be isolated if required by opening the TX2 and RX2 jumpers</li> <li>Using UART2 to pass the correction data is recommended, but is optional. You can use UART1 or I2C instead if you want to. Our u-blox Arduino Library has an example which shows how to read the correction data from the NEO-D9S and push it to the ZED-F9P using I2C.</li> </ul> </li> </ul> <p> The UART2 connections. (Click to enlarge) </p> <ul> <li><code>Antenna Power Divider</code> - the breakout has an on-board power divider (antenna splitter) to divide the satellite signals between the ZED and the NEO<ul> <li>The connector is SMA female (standard polarity)</li> <li>3.3V power is provided for an active antenna</li> </ul> </li> </ul> <p> The antenna splitter (power divider). (Click to enlarge) </p> <ul> <li><code>Dual USB-C connections</code> - one USB-C connector provides a direct connection to the ZED-F9P; the second provides a direct connection to the NEO-D9S<ul> <li>The board can be powered via either USB-C connector, or both</li> <li>There is no on-board USB hub. Both ports can be connected simultaneously to the same computer, or different computers if desired</li> </ul> </li> </ul> <p> The two USB-C connectors. (Click to enlarge) </p> <ul> <li><code>LED Indicators</code> - the breakout has four LED indicators:<ul> <li>3V3 Power</li> <li>RTK: Off = No Carrier Solution; Flashing = Floating Solution; On = Fixed Solution</li> <li>GEO: Geofence indication</li> <li>TP: Timing Pulse (Pulse Per Second)</li> <li>Each LED can be disabled by opening the corresponding split pad jumper on the bottom of the breakout</li> </ul> </li> </ul> <p> The LEDs. (Click to enlarge) </p> <ul> <li><code>Dual Qwiic Connectors</code> - the breakout has two Qwiic (I2C) connectors allowing the breakout to be daisy-chained into your Qwiic project</li> </ul> <p> The two Qwiic connectors. (Click to enlarge) </p> <ul> <li><code>Back-up Battery</code> - a small rechargeable coin cell maintains the ZED-F9P battery-backed RAM while the power is disconnected</li> </ul> <p> The rechargeable back-up battery. (Click to enlarge) </p> <ul> <li><code>Full set of breakout pads</code> - the breakout pads provide full access to the ZED-F9P and NEO-D9S pins <ul> <li>I2C</li> <li>UART1</li> <li>UART2</li> <li>External Interrupt</li> <li>Reset</li> <li>Safeboot</li> <li>ZED-F9P: TX_RDY, TP, GEO, RTK</li> <li>Power: 5V and 3.3V</li> </ul> </li> </ul> <p> The breakout pads. (Click to enlarge) </p>"},{"location":"hardware_overview/#board-dimensions","title":"Board Dimensions","text":"<p>The board dimensions are illustrated in the drawing below. The listed measurements are in inches. The four mounting holes are compatible with 4-40 UNC or M3.0 screws.</p> <p> Board dimensions. (Click to enlarge) </p>"},{"location":"hardware_overview/#left-edge-breakout-pads","title":"Left Edge Breakout Pads","text":"<p>With the SMA connector oriented to the 'top', the breakout pads down the left side of the board are:</p>              Pad                       Function          ANT_PWR External antenna powerCut the ANT_VCC trace and install L1 to enable EXT_INT_NEO Connected to the NEO-D9S EXT_INT pin RX1 NEO-D9S UART1 RX Pin TX1 NEO-D9S UART1 TX Pin RX2 NEO-D9S UART2 RX PinConnected to ZED-F9P TX2 (Open the TX2 jumper to isolate) TX2 NEO-D9S UART2 TX PinConnected to ZED-F9P RX2 (Open the RX2 jumper to isolate) GND Power Ground (0V) 3V3 3.3V Supply railOutput of regulator U2 (Can also be used as a power input) SDA I2C DataCommon to both ZED and NEO SCL I2C ClockCommon to both ZED and NEO <p>For more details, users can reference the schematic.</p>"},{"location":"hardware_overview/#right-edge-breakout-pads","title":"Right Edge Breakout Pads","text":"<p>With the SMA connector oriented to the 'top', the breakout pads down the right side of the board are:</p>              Pad                       Function          RESET ResetActive low. Common to both ZED and NEO EXT_INT Connected to the ZED-F9P EXT_INT pin TX1 ZED-F9P UART1 TX Pin RX1 ZED-F9P UART1 RX Pin TX2 ZED-F9P UART2 TX PinConnected to NEO-D9S RX2 (Open the TX2 jumper to isolate) RX2 ZED-F9P UART2 RX PinConnected to NEO-D9S TX2 (Open the RX2 jumper to isolate) SCL I2C ClockCommon to both ZED and NEO SDA I2C DataCommon to both ZED and NEO 3V3 3.3V Supply railOutput of regulator U2 (Can be used as a power input) GND Power Ground (0V) <p>For more details, users can reference the schematic.</p>"},{"location":"hardware_overview/#right-edge-breakout-pads_1","title":"Right Edge Breakout Pads","text":"<p>With the SMA connector oriented to the 'top', the breakout pads along the bottom edge of the board are:</p>              Pad                       Function          TX_RDY Indicates the ZED-F9P has data waiting in its I2C TX buffer TP ZED-F9P Timing Pulse (Pulse Per Second) GEO ZED-F9P Geofence indicator RTK ZED-F9P RTK indicationHigh = No Carrier Solution. Square Wave = Floating Solution. Low = Fixed Solution 5V 5V Power RailCan be used as a power input or output (from USB) (Diode protected) 3V3 3.3V Supply railOutput of regulator U2 (Can be used as a power input) GND Power Ground (0V) <p>For more details, users can reference the schematic.</p>"},{"location":"hardware_overview/#jumpers","title":"Jumpers","text":"<p>Note</p> <p><p>Never modified a jumper before? Check out our Jumper Pads and PCB Traces tutorial for a quick introduction!</p> <p> How to Work with Jumper Pads and PCB Traces </p></p> <p>There are multiple jumpers on the back of the board that can be used to modify how the board functions.</p> <p> The jumpers on the back of the function board. (Click to enlarge) </p> <ul> <li>TX2 - open this jumper to isolate NEO-D9S RX2 from ZED-F9P TX2</li> <li>RX2 - open this jumper to isolate NEO-D9S TX2 from ZED-F9P RX2<ul> <li>By default, the NEO-D9S PMP (SPARTN) correction data stream is output directly from NEO-D9S TX2 to the ZED-F9P RX2</li> <li>Opening this jumper will break that connection</li> <li>Correction data can be read from the NEO-D9S and pushed to the ZED-F9P via I2C instead</li> </ul> </li> <li>I2C - close this double jumper to connect additional pull-up resistors to I2C SCL and SDA. Not recommended</li> <li>SHLD - the two SHLD jumpers can be opened to isolate the USB-C connector shields from GND. Not recommended, but may help prevent EMI</li> <li>PWR - open this jumper to disable the Power LED</li> <li>RTK - open this jumper to disable the RTK LED</li> <li>GEO - open this jumper to disable the GEO LED</li> <li>TP - open this jumper to disable the TP (PPS) LED</li> </ul>"},{"location":"hardware_overview/#ant-pwr","title":"ANT PWR","text":"<p>By default, 3.3V active antenna power is provided on the SMA connector via the NEO-D9S VCC_RF output pin. Power is delivered via a 10 Ohm resistor, to limit the current in case the antenna cable becomes shorted.</p> <p>If your antenna requires a higher voltage (or current):</p> <ul> <li>Isolate VCC_RF by cutting the trace marked by the arrow symbols on the top of the PCB</li> </ul> <p> The VCC_RF trace. (Click to enlarge) </p> <ul> <li>Install inductor L1 - using a 0603 inductor with impedance &gt;500 Ohms at 1.5 GHz</li> </ul> <p> The position of L1. (Click to enlarge) </p> <ul> <li>Inject a clean DC supply voltage between the ANT PWR breakout pad and GND</li> </ul>"},{"location":"hardware_overview/#safeboot","title":"SAFEBOOT","text":"<p>It may be necessary to place the ZED-F9P or NEO-D9S into a \"safe boot\" state before applying a firmware upgrade.</p> <p>If this becomes necessary:</p> <ul> <li>Disconnect power to the breakout board</li> <li>For the ZED-F9P: connect a jumper wire between the SAFEBOOT ZED test point and GND</li> <li>Reconnect the power</li> <li>Disconnect the jumper</li> <li>Upgrade the firmware using u-center</li> </ul> <p>Repeat for the NEO-D9S using the SAFEBOOT NEO test point.</p> <p> The two SAFEBOOT test points. (Click to enlarge) </p>"},{"location":"hardware_overview/#led-indicators","title":"LED Indicators","text":"<p>The breakout has four LED indicators:</p> <ul> <li>3V3 Power</li> <li>RTK: Off = No Carrier Solution; Flashing = Floating Solution; On = Fixed Solution</li> <li>GEO: Geofence indication</li> <li>TP: Timing Pulse (Pulse Per Second)</li> </ul> <p>Each LED can be disabled by opening the corresponding split pad jumper on the bottom of the breakout</p>"},{"location":"hardware_overview/#back-up-battery","title":"Back-up Battery","text":"<p>A small rechargeable coin cell maintains the ZED-F9P battery-backed RAM while the power is disconnected. It maintains the ZED's GNSS Almanac and Real Time Clock.</p> <p>The battery is recharged slowly whenever 3.3V power is present.</p> <p>If the battery becomes discharged, connect 3.3V power for at least 48 hours to recharge the battery.</p>"},{"location":"hardware_overview/#power-supply-and-io-voltage","title":"Power Supply and I/O voltage","text":"<p>Both the ZED-F9P and NEO-D9S are 3.3V devices. They operate from 3.3V and all of their I/O pins are 3.3V.</p> <p>Attention</p> <p>Do not drive any of the ZED-F9P or NEO-D9S I/O pins using 5V signals. You may damage either or both modules if you do. Use a suitable level-shifter if you want to interface to a 5V development board.</p> <p>The board has a 3.3V regulator on-board to regulate 5V USB-C power (if present) down to 3.3V.</p> <p>The options for providing power to the board are as follows:</p> <ul> <li>5V power via one or both USB-C ports<ul> <li>Diode protection is provided</li> </ul> </li> <li>5V power via the 5V breakout pin<ul> <li>Diode protection prevents the USB-C ports from being reverse-fed</li> </ul> </li> <li>3.3V power via:<ul> <li>Either of the Qwiic connectors</li> <li>Any of the 3V3 breakout pins</li> </ul> </li> </ul>"},{"location":"hardware_overview/#current-draw","title":"Current Draw","text":"<p>Worst-case current draw of the ZED-F9P and NEO-D9S combined is 260mA at 3.3V.</p> <p>Typical current draw of the ZED-F9P and NEO-D9S combined is 100mA.</p> <p>(These figures exclude any current drawn by an active antenna.)</p>"},{"location":"readme/","title":"Readme","text":"<p>This folder contains the assets and markdown files for the SparkX u-blox ZED-F9P NEO-D9S Combo Breakout Product Manual that are rendered with mkdocs.</p>"},{"location":"resources/","title":"Resources","text":"<p>For more resources related to the SparkX u-blox ZED-F9P NEO-D9S Combo Breakout, check out the links listed here: </p> <ul> <li>Schematic (PDF)</li> <li>Eagle Files (ZIP)</li> <li>Board Dimensions (PNG)</li> <li>SparkFun u-blox GNSS Arduino Library<ul> <li>Example: L-Band correction with correction data push via I2C. The I2C push is not necessary on the combo breakout. The correction data will be transferred automatically via UART2.</li> <li>Example: L-Band correction with key retrieval via MQTT</li> </ul> </li> </ul> <p>u-blox resources: </p> <ul> <li>NEO-D9S and ZED-F9 configuration - SPARTN L-band correction data reception</li> <li>u-blox u-center - GNSS evaluation software for Windows</li> <li>PointPerfect GNSS augmentation service</li> <li>PointPerfect Product Summary</li> <li>PointPerfect Service Description</li> <li>PointPerfect Service Coverage</li> <li>Thingstream IoT service delivery platform</li> <li>Thingstream Login</li> <li>Thingstream Registration</li> </ul>"},{"location":"software_overview/","title":"Software Overview","text":""},{"location":"software_overview/#software-overview","title":"Software Overview","text":"<p>There are three key steps to be able to achieve centimeter positioning accuracy using the ZED-F9P NEO-D9S Combo Breakout:</p> <ul> <li>Register with u-blox Thingstream and sign up for a PointPerfect L-band plan (data stream)</li> <li>Configure the NEO-D9S to receive the u-blox PointPerfect correction data stream</li> <li>Configure the ZED-F9P with encryption key(s) so it can decrypt and use the correction data</li> </ul> <p>By default, the Combo Breakout is configured such that the correction data is passed from the NEO to the ZED using the UART2 interface. However, it is also possible to read the correction data from the NEO and push (write) it to the ZED using I2C.</p>"},{"location":"software_overview/#thingstream-and-pointperfect","title":"Thingstream and PointPerfect","text":"<p>Thingstream is u-blox service delivery platform for IoT Communication-as-a-Service, IoT Security-as-a-Service and IoT Location-as-a-Service.</p> <p>PointPerfect is u-blox GNSS augmentation service which is designed to provide high-precision GNSS corrections to suitable receivers to provide decimeter-level location accuracy.</p> <p>PointPerfect data is delivered through Thingstream. The first step is to register with Thingstream and then request an L-Band plan:</p> <p> PointPerfect pricing (correct at Sept. 14th 2022). (Click to enlarge) </p> <p>You can find the current pricing on u-blox portal. Select IoT Location-as-a-Service and then PointPerfect.</p> <p>You may need to contact u-blox first, to enable the option to purchase an L-Band plan through your Thingstream account.</p> <p>The PointPerfect L-band plan provides unlimited access to the L-band satellite correction data stream (via the NEO-D9S).</p> <p>If you have an internet connection, you can also receive PointPerfect corrections via IP (MQTT). The PointPerfect L-band and IP plan may be a better choice if you think you may want to receive correction data via both satellite and Internet.</p> <p>Once L-band permissions are enabled on your Thingstream account, you will be able to add a new L-band Location Thing and view its credentials:</p> <ul> <li>Login to Thingstream</li> <li>Select Location Services and then Location Things</li> <li>The Add Location Thing button (top right) will allow you to select and activate an L-Band plan</li> <li>Once your L-band plan is active, you will be able to monitor your Activity and view your Credentials via the appropriate tabs</li> </ul> <p>u-blox have written a comprehensive application note which describes in detail: the configuration of both NEO and ZED; and how to interpret the expiry date for the L-band encryption keys. In the following sections, we describe how to configure the NEO and ZED using our u-blox GNSS Arduino Library.</p>"},{"location":"software_overview/#neo-d9s-configuration","title":"NEO-D9S Configuration","text":"<p>The first step is to declare the <code>SFE_UBLOX_GNSS</code> object. Like most Arduino sketches, this is done at a global scope (after the include file declaration), not within the <code>setup()</code> or <code>loop()</code> functions. </p> <pre><code>#include &lt;SparkFun_u-blox_GNSS_v3.h&gt; //http://librarymanager/All#SparkFun_u-blox_GNSS_v3\nSFE_UBLOX_GNSS myLBand; // NEO-D9S\n</code></pre> <p>Within <code>setup()</code> we then need to start (initialize) communiation with the NEO-D9S. The NEO-D9S has a default I2C address of 0x43 and so we need to provide that when calling the <code>begin</code> method:</p> <pre><code>  Wire.begin(); //Start I2C\nwhile (myLBand.begin(Wire, 0x43) == false) //Connect to the u-blox NEO-D9S using Wire port. The D9S default I2C address is 0x43 (not 0x42)\n{\nSerial.println(F(\"u-blox NEO-D9S not detected at default I2C address. Please check wiring.\"));\ndelay(2000);\n}\nSerial.println(F(\"u-blox NEO-D9S connected\"));\n</code></pre> <p>The NEO-D9S needs to be configured so it can receive the PointPerfect correction stream. The configuration items are: </p> Configuration item Default value CFG-PMP-CENTER_FREQUENCY 1539812500 Hz CFG-PMP-SEARCH_WINDOW 2200 Hz CFG-PMP-USE_SERVICE_ID 1 (true) CFG-PMP-SERVICE_ID 50821 CFG-PMP-DATA_RATE 2400 (B2400) bps CFG-PMP-USE_DESCRAMBLER 1 (true) CFG-PMP-DESCRAMBLER_INIT 23560 CFG-PMP-USE_PRESCRAMBLING 0 (false) CFG-PMP-UNIQUE_WORD 0xe15ae893e15ae893 <p>The centre frequency varies depending on which satellite is broadcasting corrections for your geographical area. The frequency for the USA is different to that for Europe:</p> <p>The up-to-date frequencies are distributed via the MQTT /pp/frequencies/Lb topic. At the time of writing, they are (in MHz):</p> <pre><code>{\n\"frequencies\": {\n\"us\": {\n\"current\": {\n\"value\": \"1556.29\"\n}\n},\n\"eu\": {\n\"current\": {\n\"value\": \"1545.26\"\n}\n}\n}\n}\n</code></pre> <p>We can add those to the code as follows:</p> <pre><code>const uint32_t myLBandFreq = 1556290000; // Uncomment this line to use the US SPARTN 1.8 service\n//const uint32_t myLBandFreq = 1545260000; // Uncomment this line to use the EU SPARTN 1.8 service\n</code></pre> <p>The code to configure the NEO-D9S is as follows. Note that the <code>UBLOX_CFG_PMP_USE_SERVICE_ID</code>, <code>UBLOX_CFG_PMP_SERVICE_ID</code> and <code>UBLOX_CFG_PMP_DESCRAMBLER_INIT</code> also need to be changed.</p> <pre><code>  uint8_t ok = myLBand.setVal(UBLOX_CFG_PMP_CENTER_FREQUENCY,  myLBandFreq); // Default 1539812500 Hz\nif (ok) ok = myLBand.setVal(UBLOX_CFG_PMP_SEARCH_WINDOW,     2200);        // Default 2200 Hz\nif (ok) ok = myLBand.setVal(UBLOX_CFG_PMP_USE_SERVICE_ID,    0);           // Default 1 \nif (ok) ok = myLBand.setVal(UBLOX_CFG_PMP_SERVICE_ID,        21845);       // Default 50821\nif (ok) ok = myLBand.setVal(UBLOX_CFG_PMP_DATA_RATE,         2400);        // Default 2400 bps\nif (ok) ok = myLBand.setVal(UBLOX_CFG_PMP_USE_DESCRAMBLER,   1);           // Default 1\nif (ok) ok = myLBand.setVal(UBLOX_CFG_PMP_DESCRAMBLER_INIT,  26969);       // Default 23560\nif (ok) ok = myLBand.setVal(UBLOX_CFG_PMP_USE_PRESCRAMBLING, 0);           // Default 0\nif (ok) ok = myLBand.setVal(UBLOX_CFG_PMP_UNIQUE_WORD,       16238547128276412563ull); // 0xE15AE893E15AE893\n</code></pre> <p>Finally, we need to ensure that the UART2 port is set correctly. We need to:</p> <ul> <li>Change the baud rate to 38400 - to match the ZED-F9P's baud rate</li> <li>Ensure that the UBX protocol is enabled for output on UART2</li> <li>Enable the RXM PMP message on UART2<ul> <li>The RXM PMP message contains the SPARTN correction data in UBX format</li> </ul> </li> <li>Perform a restart (software reset) so that the NEO-D9S starts using the new configuration items</li> </ul> <pre><code>  if (ok) ok = myLBand.setVal(UBLOX_CFG_UART2_BAUDRATE,           38400); // match baudrate with ZED default\nif (ok) ok = myLBand.setVal(UBLOX_CFG_UART2OUTPROT_UBX,         1);     // Enable UBX output on UART2\nif (ok) ok = myLBand.setVal(UBLOX_CFG_MSGOUT_UBX_RXM_PMP_UART2, 1);     // Output UBX-RXM-PMP on UART2\nSerial.print(F(\"L-Band configuration: \"));\nif (ok)\nSerial.println(F(\"OK\"));\nelse\nSerial.println(F(\"NOT OK!\"));\nmyLBand.softwareResetGNSSOnly(); // Do a restart\n</code></pre> <p>Once the NEO-D9S has aquired the signal from the satellite, it will start outputting PMP correction messages to the ZED-F9P on UART2.</p>"},{"location":"software_overview/#zed-f9p-configuration","title":"ZED-F9P Configuration","text":"<p>We need to declare a second <code>SFE_UBLOX_GNSS</code> object for the ZED-F9P. Again, this is done at a global scope (after the include file declaration), not within the <code>setup()</code> or <code>loop()</code> functions. </p> <pre><code>SFE_UBLOX_GNSS myGNSS; // ZED-F9P\n</code></pre> <p>Within <code>setup()</code> we need to start (initialize) communiation with the ZED-F9P:</p> <pre><code>  while (myGNSS.begin() == false) //Connect to the u-blox module using Wire port and the default I2C address (0x42)\n{\nSerial.println(F(\"u-blox GNSS module not detected at default I2C address. Please check wiring.\"));\ndelay(2000);\n}\nSerial.println(F(\"u-blox GNSS module connected\"));\n</code></pre> <p>We then need to:</p> <ul> <li>Make sure the ZED-F9P's UART2 port is configured to accept the PMP correction data</li> <li>Tell the ZED-F9P to use FIXED carrier solutions when possible (this is the default setting)</li> <li>Tell the ZED-F9P to accept L-band PMP as a correction source</li> </ul> <pre><code>          ok = myGNSS.setI2CInput(COM_TYPE_UBX | COM_TYPE_NMEA | COM_TYPE_SPARTN); //Be sure SPARTN input is enabled\nif (ok) ok = myGNSS.setDGNSSConfiguration(SFE_UBLOX_DGNSS_MODE_FIXED); // Set the differential mode - ambiguities are fixed whenever possible\nif (ok) ok = myGNSS.setVal8(UBLOX_CFG_SPARTN_USE_SOURCE, 1); // use LBAND PMP message\n</code></pre> <p>The final piece of the puzzle is to provide the ZED-F9P with the keys it needs to decrypt the encrypted SPARTN (PMP) corrections.</p> <p>The ZED-F9P can hold two dynamic keys: the current key; and the next key. We also need to tell it when each key is valid from, so it knows when to switch to the next key.</p> <p>You can find the current and next keys in the <code>Location Services \\ Location Things \\ Thing Details \\ Credentials</code> tab in Thingstream:</p> <p> PointPerfect L-band dynamic keys. (Click to enlarge) </p> <p>The ZED-F9P actually needs to know when the keys are valid from, rather than when they expire. Each key is walid for four weeks, so we need to work backwards 4 weeks from the expiry date.</p> <p>The current key expires at midnight (UTC) at the end of Friday September 23rd. This means it became valid 4 weeks earlier at midnight (UTC) on August 27th:</p> <p> Dynamic Key: Expiry and Valid From dates. (Click to enlarge) </p> <p>Using the website recommended in the u-blox Application Note:</p> <p>http://navigationservices.agi.com/GNSSWeb</p> <p>we can see that the key became valid during GPS week 2224, at time-of-week 518400.</p> <p>We can use the Arduino Library <code>setDynamicSPARTNKey</code> method to configure a single key:</p> <pre><code>  if (ok) ok = myGNSS.setDynamicSPARTNKey(16, 2224, 518400, \"500--------------------------177\");\nSerial.print(F(\"GNSS: configuration \"));\nif (ok)\nSerial.println(F(\"OK\"));\nelse\nSerial.println(F(\"NOT OK!\"));\n</code></pre> <p>Alternately, we can set both the current key and the next key together using <code>setDynamicSPARTNKeys</code>. The next key becomes valid during GPS week 2228:</p> <pre><code>  if (ok) ok = myGNSS.setDynamicSPARTNKeys(16, 2224, 518400, \"500--------------------------177\", 16, 2228, 518400, \"582--------------------------a7d\");\n</code></pre> <p>The keys can also be retrieved using MQTT. We have an Arduino Library example which shows how to retrieve the keys from the L-band + IP key distribution topic /pp/ubx/0236/Lb . That topic provides the keys in UBX (binary) format, ready to be pushed to the ZED.</p> <p>The keys are also available in human-readable JSON format from the MQTT topic /pp/key/Lb . But note that that topic provides the valid from in Unix epoch format, in milliseconds, excluding the 18 leap seconds since GPS time started!</p> <pre><code>{\n\"dynamickeys\": {\n\"current\": {\n\"start\": \"1661558382000\",\n\"duration\": \"2419199999\",\n\"value\": \"500--------------------------177\"\n},\n\"next\": {\n\"start\": \"1663977582000\",\n\"duration\": \"2419199999\",\n\"value\": \"582--------------------------a7d\"\n}\n}\n}\n</code></pre>"},{"location":"troubleshooting_tips/","title":"Troubleshooting Tips","text":"<p>Note</p> <p><p> Not working as expected and need help? </p> <p>SparkX products are rapidly produced to bring you the most cutting edge technology as it becomes available. These products are tested but come with no guarantees. Live technical support is not available for SparkX products. Head on over to our forum for support or to ask a question.<p> SparkX Forum <p>You'll need a Forum Account to search the product forums and post questions.<p></p> <p>Attention</p> <p>u-blox provides products and services to \"B2B Customers\". Only business customers are eligible to register for a Thingstream (PointPerfect) account. You may be required to demonstrate that the use of the combo breakout is in relation to your trade, business, craft or profession. u-blox products and services are not intended for individual consumer use.</p>"},{"location":"troubleshooting_tips/#pointperfect-l-band-reception","title":"PointPerfect L-band Reception","text":"<p>In order to receive the u-blox PointPerfect correction data, you will: need a suitable antenna; need to be located within contiguous USA or Europe; and have a clear view of the sky to the South.</p>"},{"location":"troubleshooting_tips/#sparkfun-gnss-multi-band-l1l2-surveying-antenna-top106","title":"SparkFun GNSS Multi-Band L1/L2 Surveying Antenna - TOP106","text":"<p>We have been successful using the SparkFun GNSS Multi-Band L1/L2 Surveying Antenna (TNC) - TOP106 (GPS-17751) antenna to receive PointPerfect correction data in both the USA and Europe.</p>"},{"location":"troubleshooting_tips/#pointperfect-coverage","title":"PointPerfect Coverage","text":"<p>The PointPerfect GNSS augmentation service is available on a continental scale with seamless coverage in Europe and contiguous USA, including up to 12 nautical miles  (~ 22 km) off coastlines. u-blox are continuously expanding their coverage according to market demand.</p> <p> PointPerfect Service Coverage. (Click to enlarge) </p>"},{"location":"troubleshooting_tips/#pointperfect-satellite-broadcast","title":"PointPerfect Satellite Broadcast","text":"<p>PointPerfect augmentation data is broadcast from satellites covering Europe and contiguous USA. The satellites are in geostationary orbits over the equator - the same as for satellite television broadcasts. It is essential that your antenna has an unobstructed view of the sky, especially to the South where the satellite is positioned.</p> <p>Depending on your latitude, the satellite for your area could be low in the sky. You need to ensure that trees, buildings etc. are not blocking the signal.</p>"}]}